<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Local Intranet Credentials</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .password-cell {
            position: relative;
            display: flex;
            align-items: center;
        }
        .password-text {
            flex-grow: 1;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .action-button {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s;
        }
        .action-button-sm {
            padding: 0.125rem 0.3rem;
            font-size: 0.75rem;
            margin-left: 0.25rem;
        }
        /* Custom styles for better visual feedback on copy */
        .copied-feedback {
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%) translateY(-5px);
            background-color: #28a745; /* Green */
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.75rem;
            white-space: nowrap;
            opacity: 0;
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
            pointer-events: none; /* So it doesn't interfere with clicks */
        }
        .copied-feedback.show {
            opacity: 1;
            transform: translateX(-50%) translateY(-10px);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col items-center py-8 px-4">

    <div class="w-full max-w-4xl bg-white p-6 md:p-8 rounded-xl shadow-2xl">
        <header class="mb-6 text-center">
            <h1 class="text-3xl font-bold text-gray-800">Local Intranet Credential Manager</h1>
        </header>

        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-md" role="alert">
            <p class="font-bold">Security Warning!</p>
            <p class="text-sm">This page stores credentials as plain text directly in the HTML file. It is <strong>highly insecure</strong>. Anyone with access to this file can view your passwords. Only use this for non-sensitive, local intranet logins on a completely trusted and private network. You are responsible for the security of this file.</p>
        </div>

        <div class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-8 rounded-md">
            <p class="font-bold">How to Use & Save:</p>
            <ol class="list-decimal list-inside text-sm space-y-1">
                <li>Enter the URL, Username/Email, and Password in the form below.</li>
                <li>Click "Add Credential". The entry will appear in the table.</li>
                <li><strong>To permanently save your changes:</strong> You MUST save this webpage (Press <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">Ctrl</kbd> + <kbd class="px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg">S</kbd> or go to File > Save Page As...) to your computer.</li>
                <li>When you re-open the saved HTML file, your stored credentials will be visible.</li>
                <li>If you add or delete credentials, you need to save the page again to persist those changes.</li>
            </ol>
        </div>

        <div class="mb-8 p-6 bg-gray-50 rounded-lg shadow">
            <h2 class="text-xl font-semibold text-gray-700 mb-4">Add New Credential</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                <div>
                    <label for="url" class="block text-sm font-medium text-gray-700 mb-1">URL</label>
                    <input type="text" id="url" name="url" placeholder="e.g., http://intranet.local/login" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username / Email</label>
                    <input type="text" id="username" name="username" placeholder="e.g., admin or user@example.com" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                    <input type="text" id="password" name="password" placeholder="Enter password" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
            </div>
            <button id="addCredentialBtn" class="mt-6 w-full md:w-auto inline-flex justify-center items-center px-6 py-2.5 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Add Credential
            </button>
        </div>

        <div class="bg-white rounded-lg shadow overflow-hidden">
            <h2 class="text-xl font-semibold text-gray-700 p-4 border-b border-gray-200">Stored Credentials</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">URL</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Username/Email</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Password</th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="credentialsTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- 
                        <tr data-id="example123">
                            <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-700">http://example.intranet</td>
                            <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-700">admin</td>
                            <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-700 password-cell">
                                <span class="password-text" data-original-password="verysecret">••••••••</span>
                                <div class="flex items-center ml-2">
                                    <button class="toggle-visibility-btn action-button action-button-sm bg-gray-200 hover:bg-gray-300 text-gray-700" title="Show/Hide Password">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" /></svg>
                                    </button>
                                    <button class="copy-password-btn action-button action-button-sm bg-blue-100 hover:bg-blue-200 text-blue-700 ml-1" title="Copy Password">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>
                                    </button>
                                </div>
                                <span class="copied-feedback">Copied!</span>
                            </td>
                            <td class="px-4 py-3 whitespace-nowrap text-sm font-medium">
                                <button class="delete-btn action-button bg-red-500 hover:bg-red-600 text-white">Delete</button>
                            </td>
                        </tr>
                         -->
                    </tbody>
                </table>
            </div>
            <div id="noCredentialsMessage" class="p-4 text-center text-gray-500">
                No credentials stored yet. Add some using the form above.
            </div>
        </div>

    </div>

    <script>
        // Wait for the DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', () => {
            const urlInput = document.getElementById('url');
            const usernameInput = document.getElementById('username');
            const passwordInput = document.getElementById('password');
            const addCredentialBtn = document.getElementById('addCredentialBtn');
            const credentialsTableBody = document.getElementById('credentialsTableBody');
            const noCredentialsMessage = document.getElementById('noCredentialsMessage');

            // Function to update the visibility of the "no credentials" message
            function updateNoCredentialsMessage() {
                if (credentialsTableBody.rows.length === 0) {
                    noCredentialsMessage.style.display = 'block';
                } else {
                    noCredentialsMessage.style.display = 'none';
                }
            }

            // Function to add a credential to the table
            function addCredentialToTable(id, url, username, password, isPasswordVisible = false) {
                const newRow = credentialsTableBody.insertRow();
                newRow.setAttribute('data-id', id); // Unique ID for each row

                // URL Cell
                const urlCell = newRow.insertCell();
                urlCell.className = 'px-4 py-3 whitespace-nowrap text-sm text-gray-700';
                const urlLink = document.createElement('a');
                urlLink.href = url.startsWith('http') ? url : 'http://' + url;
                urlLink.textContent = url;
                urlLink.target = '_blank';
                urlLink.rel = 'noopener noreferrer';
                urlLink.className = 'text-indigo-600 hover:text-indigo-800 hover:underline';
                urlCell.appendChild(urlLink);

                // Username Cell
                const usernameCell = newRow.insertCell();
                usernameCell.className = 'px-4 py-3 whitespace-nowrap text-sm text-gray-700';
                usernameCell.textContent = username;

                // Password Cell
                const passwordCell = newRow.insertCell();
                passwordCell.className = 'px-4 py-3 whitespace-nowrap text-sm text-gray-700 password-cell';
                
                const passwordTextSpan = document.createElement('span');
                passwordTextSpan.className = 'password-text';
                passwordTextSpan.dataset.originalPassword = password;
                passwordTextSpan.textContent = isPasswordVisible ? password : '••••••••';
                
                const controlsDiv = document.createElement('div');
                controlsDiv.className = 'flex items-center ml-2';

                // Toggle Visibility Button
                const toggleBtn = document.createElement('button');
                toggleBtn.className = 'toggle-visibility-btn action-button action-button-sm bg-gray-200 hover:bg-gray-300 text-gray-700';
                toggleBtn.title = 'Show/Hide Password';
                toggleBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                          <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                          <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                       </svg>`;
                
                // Copy Password Button
                const copyBtn = document.createElement('button');
                copyBtn.className = 'copy-password-btn action-button action-button-sm bg-blue-100 hover:bg-blue-200 text-blue-700 ml-1';
                copyBtn.title = 'Copy Password';
                copyBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                     </svg>`;

                const copiedFeedbackSpan = document.createElement('span');
                copiedFeedbackSpan.className = 'copied-feedback';
                copiedFeedbackSpan.textContent = 'Copied!';

                controlsDiv.appendChild(toggleBtn);
                controlsDiv.appendChild(copyBtn);

                passwordCell.appendChild(passwordTextSpan);
                passwordCell.appendChild(controlsDiv);
                passwordCell.appendChild(copiedFeedbackSpan); // Add feedback span to cell

                // Actions Cell (Delete Button)
                const actionsCell = newRow.insertCell();
                actionsCell.className = 'px-4 py-3 whitespace-nowrap text-sm font-medium';
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'delete-btn action-button bg-red-500 hover:bg-red-600 text-white';
                deleteBtn.textContent = 'Delete';
                actionsCell.appendChild(deleteBtn);

                updateNoCredentialsMessage(); // Update message after adding a row
            }

            // Event listener for the "Add Credential" button
            addCredentialBtn.addEventListener('click', () => {
                const url = urlInput.value.trim();
                const username = usernameInput.value.trim();
                const password = passwordInput.value.trim();

                if (!url || !username || !password) {
                    // You could implement a more user-friendly notification here
                    // For now, just log to console and return
                    console.warn('All fields are required.');
                    // Simple alert (not recommended for final product, but ok for this context)
                    // For a better UX, you'd use a custom modal or inline message.
                    // Since alert() is disallowed, this is a placeholder for better error handling.
                    const errorDiv = document.createElement('div');
                    errorDiv.textContent = 'All fields (URL, Username, Password) are required.';
                    errorDiv.className = 'fixed top-5 left-1/2 transform -translate-x-1/2 bg-red-500 text-white p-3 rounded-md shadow-lg z-50';
                    document.body.appendChild(errorDiv);
                    setTimeout(() => {
                        errorDiv.remove();
                    }, 3000);
                    return;
                }
                
                // Generate a unique ID for the row (simple timestamp-based for this local file)
                const uniqueId = 'cred_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

                addCredentialToTable(uniqueId, url, username, password);

                // Clear input fields
                urlInput.value = '';
                usernameInput.value = '';
                passwordInput.value = '';
            });

            // Event delegation for actions within the table (Delete, Toggle Visibility, Copy)
            credentialsTableBody.addEventListener('click', (event) => {
                const target = event.target.closest('button');
                if (!target) return;

                const row = target.closest('tr');
                if (!row) return;

                // Handle Delete
                if (target.classList.contains('delete-btn')) {
                    row.remove();
                    updateNoCredentialsMessage(); // Update message after deleting a row
                }

                // Handle Toggle Password Visibility
                if (target.classList.contains('toggle-visibility-btn')) {
                    const passwordTextSpan = row.querySelector('.password-text');
                    const originalPassword = passwordTextSpan.dataset.originalPassword;
                    const isCurrentlyVisible = passwordTextSpan.textContent !== '••••••••';

                    if (isCurrentlyVisible) {
                        passwordTextSpan.textContent = '••••••••';
                        target.title = 'Show Password';
                        // Update icon to 'eye' (visible)
                        target.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                              <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                              <path stroke-linecap="round" stroke-linejoin="round" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                           </svg>`;
                    } else {
                        passwordTextSpan.textContent = originalPassword;
                        target.title = 'Hide Password';
                        // Update icon to 'eye-off' (hidden)
                        target.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                              <path stroke-linecap="round" stroke-linejoin="round" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.542-7 .527-1.566 1.376-2.964 2.382-4.125M10.125 5.175A10.051 10.051 0 0112 5c4.478 0 8.268 2.943 9.542 7-.527 1.566-1.376 2.964-2.382 4.125M12 15a3 3 0 110-6 3 3 0 010 6z" />
                                              <path stroke-linecap="round" stroke-linejoin="round" d="M21 21L3 3" />
                                           </svg>`;
                    }
                }

                // Handle Copy Password
                if (target.classList.contains('copy-password-btn')) {
                    const passwordTextSpan = row.querySelector('.password-text');
                    const passwordToCopy = passwordTextSpan.dataset.originalPassword;
                    
                    // Create a temporary textarea to copy text
                    const tempTextArea = document.createElement('textarea');
                    tempTextArea.value = passwordToCopy;
                    document.body.appendChild(tempTextArea);
                    tempTextArea.select();
                    try {
                        document.execCommand('copy'); // This is the fallback
                        const feedbackSpan = row.querySelector('.copied-feedback');
                        if (feedbackSpan) {
                            feedbackSpan.classList.add('show');
                            setTimeout(() => {
                                feedbackSpan.classList.remove('show');
                            }, 1500);
                        }
                    } catch (err) {
                        console.error('Failed to copy password: ', err);
                        // Fallback for user if execCommand fails (e.g. prompt them to copy manually)
                        // For now, just log. A custom message could be shown.
                        const errorDiv = document.createElement('div');
                        errorDiv.textContent = 'Failed to copy. Please copy manually.';
                        errorDiv.className = 'fixed top-5 left-1/2 transform -translate-x-1/2 bg-yellow-500 text-black p-3 rounded-md shadow-lg z-50';
                        document.body.appendChild(errorDiv);
                        setTimeout(() => {
                            errorDiv.remove();
                        }, 3000);
                    }
                    document.body.removeChild(tempTextArea);
                }
            });

            // Initial check for the "no credentials" message
            updateNoCredentialsMessage();
        });
    </script>

</body>
</html>
